#+STARTTIP: overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
  ;;; package --- summary
  ;;; Commentary:
  ;;; Code:

  ;;disable start screen
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)

  ;;yes or no prompts to y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "<f5>") 'revert-buffer)

  ;;reduce clutter in init file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
  (package-initialize)

  ;; Delete my files by moving them to the trash. I'm human and
  ;; occasionally delete things that I actually want later:
  (setq delete-by-moving-to-trash t)

#+END_SRC

#+RESULTS:
: t

* scrolling
#+BEGIN_SRC emacs-lisp
  ;; Emacs has some awful scrolling by default. This gets rid of that.
  (setq scroll-step 1) ; keyboard scroll one line at a time
  (setq scroll-preserve-screen-position 'always)
  (setq scroll-conservatively 101)
  (setq next-screen-context-lines 5)

  ;;mouse scrolling

  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq ring-bell-function 'ignore)

#+END_SRC

* message
#+BEGIN_SRC emacs-lisp
(message "hello from init.el")
(message "hello from ubuntu")
#+END_SRC

* modes
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
(set-face-attribute 'default nil :height 110)

;;linum-mode hooks
(add-hook 'emacs-lisp-mode-hook 'linum-mode)
(add-hook 'sh-mode-hook 'linum-mode)
#+END_SRC

* themes
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)
#+END_SRC

#+RESULTS:

* don't know if this is required
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (add-to-list 'load-path "~/.emacs.d/elpa/use-package" user-emacs-directory)
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil)
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))

#+END_SRC

#+RESULTS:

* aggressive-indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  ;; Keep code indented automatically
  :defer 10
  :config
  (global-aggressive-indent-mode))

(use-package cdlatex
  :hook (LaTeX-mode . turn-on-cdlatex))
#+END_SRC

* auctex
#+BEGIN_SRC emacs-lisp
(use-package tex-site
  ;; AuCTeX is better than the built in tex mode; let's use it.  This
  ;; demand adds almost nothing and ensures that auctex gets to set itself
  ;; up properly. That's necessary because of how weirdly it gets loaded.
  :demand t
  :custom
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-electric-math '("\\(" . "\\)") "Smart $ behavior")
  (TeX-electric-sub-and-superscript t)
  (TeX-parse-self t)
  (reftex-plug-into-AUCTeX t)
  (TeX-source-correlate-method 'synctex)
  (TeX-source-correlate-mode t)
  (TeX-clean-confirm nil)
  ;; TeX-command-list by default contains a bunch of stuff I'll never
  ;; use. I use latexmk, xelatexmk, and View.  That's pretty much it.
  ;; Maybe one day I'll add "clean" back to the list.
  ;; (TeX-command-list
  ;;  '(("latexmk" "latexmk -synctex=1 -quiet -pdf %s"
  ;;     TeX-run-compile nil t :help "Process file with latexmk")
  ;;    ("View" "%V" TeX-run-discard-or-function nil t :help "Run Viewer")
  ;;    ("xelatexmk" "latexmk -synctex=1 -quiet -xelatex %s"
  ;;     TeX-run-compile nil t :help "Process file with xelatexmk")))
  :hook
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . reftex-mode)
  (LaTeX-mode . TeX-PDF-mode)
  (LaTeX-mode . (lambda ()
		  (push
		   '("Make" "latexmk -outdir=/tmp %t" TeX-run-TeX nil t
		     :help "Make pdf output using latexmk.")
		   TeX-command-list)))
  :config
  (setq-default TeX-command-default "latexmk")
  ;; revert pdf from file after compilation finishes
  (use-package tex-buf
    :config
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
  (use-package latex
    :bind
    (:map LaTeX-mode-map
          ("M-p" . outline-previous-visible-heading)
          ("M-n" . outline-next-visible-heading)
          ("<backtab>" . org-cycle))
    :config
    (push "\\.fdb_latexmk" LaTeX-clean-intermediate-suffixes)
    (push "\\.fls" LaTeX-clean-intermediate-suffixes)
    (push "\\.synctex.gz" LaTeX-clean-intermediate-suffixes)))
#+END_SRC

* company
#+BEGIN_SRC emacs-lisp
(use-package company
  ;; Company mode provides autocompletion of text and code.
  :bind
  (:map company-active-map
	("C-s" . company-search-candidates)
	("<tab>" . company-complete-common-or-cycle)
	("RET" . company-complete-selection)
	("C-n" . company-select-next)
	("C-p" . company-select-previous))
  :hook
  ((prog-mode ess-mode) . company-mode)
  :custom
  (company-idle-delay 0.25)
  (company-require-match nil)
  (company-minimum-prefix-length 2))
#+END_SRC

* eclim 
#+BEGIN_SRC emacs-lisp
  (use-package eclim
    :ensure t
    :load-path ("~/.emacs.d/elpa/eclim-20171113.1754/")
    :init
    (progn
      (setq eclimd-autostart t
	    eclim-executable "/opt/eclipse/plugins/org.eclim_2.7.2/bin/eclim"
	    eclimd-executable "/opt/eclipse/plugins/org.eclim_2.7.2/bin/eclimd"
	    ;;eclimd-wait-for-process t
	    eclimd-default-workspace "~/my-workspace"
	    eclim-eclipse-dirs "/opt/eclipse"
	    help-at-pt-display-when-idle t
	    help-at-pt-timer-delay 1.0
	    eclim-auto-save nil
	    )
      (help-at-pt-set-timer)
      )
    :hook (java-mode . eclim-mode)
    )
#+END_SRC

#+RESULTS:
| eclim-mode | eclim |

* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config 
    ;;(setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    )
#+END_SRC

#+RESULTS:
: t

* Helm
#+BEGIN_SRC emacs-lisp
  ;;; Helm
  (use-package helm
    ;; A package in a league of its own: https://tuhdo.github.io/helm-intro.html
    ;; load it soon after starting Emacs:
    :defer 1
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("M-y" . helm-show-kill-ring)
     ("C-M-z" . helm-resume)
     ([remap occur] . helm-occur)
     ([remap bookmark-jump] . helm-bookmarks)
     ("C-x b" . helm-buffers-list)
     ("C-x C-b" . helm-buffers-list)
     ("M-s M-g" . helm-google-suggest)
     ("M-o" . helm-semantic-or-imenu)
     ("C-h SPC" . helm-all-mark-rings)
     ("M-s g" . helm-grep-do-git-grep)
     :map helm-map
     ("<tab>" . helm-execute-persistent-action)
     ("C-i" . helm-execute-persistent-action)
     ("C-z" . helm-select-action))
    :custom
    (helm-display-header-line nil)
    (helm-echo-input-in-header-line t)
    (helm-net-prefer-curl t)
    (helm-split-window-default-side 'below)
    (helm-split-window-inside-p t)
    (helm-command-prefix-key "M-,")
    :init
    (require 'helm-config)
    :config
    (use-package helm-files
      :config
      (push ".git$" helm-boring-file-regexp-list))
    (use-package helm-org
      :bind
      (:map my/map
	    ("t" . helm-org-agenda-files-headings)))
    (helm-mode)
    (use-package helm-swoop
      :config
      (progn
	(global-set-key (kbd "C-s") 'helm-swoop-without-pre-input)
	;;(setq helm-swoop-pre-input-function  (lambda () ""))
	(setq helm-swoop-use-fuzzy-match t)
	)
      ))
#+END_SRC

#+RESULTS:
: helm-select-action

* magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  ;;magit is magical git
  :bind ("C-x g" . magit-status))
#+END_SRC

#+RESULTS:
: magit-status

* markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :hook (markdown-mode . linum-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-src-window-setup 'current-window)
    )
    (use-package org-bullets
      :hook (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC
* pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  ;; I like emacs, so why not view PDFs in it?  The built-in docview mode
  ;; can do so, but pdf-tools is better in all sorts of ways.

  ;; NOTE: ~pdf-tools~ only officially supports gnu/linux operating
  ;; systems. I think that it will work on macs as well, but you may have
  ;; to finagle it a bit. Regardless, I tell emacs to only use it if the OS
  ;; is linux based.
  :if (eq system-type 'gnu/linux)
  :magic ("%PDF" . pdf-view-mode)
  :defer 7
  :custom
  (pdf-sync-forward-display-pdf-key "<C-return>" "Use C-RET in latex mode to jump to location in pdf file")
  (pdf-view-display-size 'fit-page "Show full pages by default instead of fitting page width.")
  (TeX-view-program-selection '((output-pdf "pdf-tools")) "Use pdf-tools to display pdfs from latex runs.")
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  :config
  ;; The t says to install the server without asking me --- this may take a
  ;; second
  (pdf-tools-install t))
#+END_SRC

* change directory
#+BEGIN_SRC emacs-lisp
(cd (getenv "OneDriveBash"))
#+END_SRC

