#+PROPERTY: header-args  :results output silent :exports code :eval never-export

* Initial
** use-package
#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (add-to-list 'load-path "~/.emacs.d/elpa/use-package" user-emacs-directory)
    (require 'use-package))
  (use-package diminish
    :ensure t)
  (use-package bind-key
    :ensure t)
#+END_SRC
** Custom Functions
*** eval-and-replace
#+BEGIN_SRC emacs-lisp

  ;; evaluate and replace
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-x M-e") 'eval-and-replace)

#+END_SRC

*** move file
#+BEGIN_SRC emacs-lisp
  (defun move-file (new-location)
    "Write this file to NEW-LOCATION, and delete the old one."
    (interactive (list (expand-file-name
                        (if buffer-file-name
                            (read-file-name "Move file to: ")
                          (read-file-name "Move file to: "
                                          default-directory
                                          (expand-file-name (file-name-nondirectory (buffer-name))
                                                            default-directory))))))
    (when (file-exists-p new-location)
      (delete-file new-location))
    (let ((old-location (expand-file-name (buffer-file-name))))
      (message "old file is %s and new file is %s"
               old-location
               new-location)
      (write-file new-location t)
      (when (and old-location
                 (file-exists-p new-location)
                 (not (string-equal old-location new-location)))
        (delete-file old-location))))
  (bind-key "C-x C-m" #'move-file)
#+END_SRC

#+RESULTS:
: move-file

*** toggle split
#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x |") 'toggle-window-split)
#+END_SRC

#+RESULTS:
: toggle-window-split
*** load-directory
#+BEGIN_SRC emacs-lisp
  (defun load-directory (dir)
    (let ((load-it (lambda (f)
                     (load-file (concat (file-name-as-directory dir) f)))
                   ))
      (mapc load-it (directory-files dir nil "\\.el$"))))
#+END_SRC
*** dired hidden files
#+BEGIN_SRC emacs-lisp
(require 'dired)

;;;###autoload
(define-minor-mode dired-hide-dotfiles-mode
  "Toggle `dired-hide-dotfiles-mode'"
  :init-value nil
  :lighter " !."
  :group 'dired
  (if dired-hide-dotfiles-mode
      (dired-hide-dotfiles--hide)
    (revert-buffer)))

;;;###autoload
(defun dired-hide-dotfiles--hide ()
  "Hide all dot-files in the current `dired' buffer."
  (when dired-hide-dotfiles-mode
    (dired-mark-files-regexp "^\\.")
    (dired-do-kill-lines)))

;;;###autoload
(add-hook 'dired-after-readin-hook 'dired-hide-dotfiles--hide)
#+END_SRC
*** open in external program
#+BEGIN_SRC emacs-lisp
(defun xdg-open (filename)
  (interactive "fFilename: ")
  (let ((process-connection-type))
    (start-process "" nil "xdg-open" (expand-file-name filename))))

(defun find-file-auto (orig-fun &rest args)
  (let ((filename (car args)))
    (if (cl-find-if
         (lambda (regexp) (string-match regexp filename))
         '("\\.pdf\\'" "\\.jpg?\\'" "\\.png?\\'" "\\.docx\\'"))
        (xdg-open filename)
      (apply orig-fun args))))

(advice-add 'find-file :around 'find-file-auto)
#+END_SRC
* General
** Clean feel
#+BEGIN_SRC emacs-lisp
  ;;disable start screen
  (setq inhibit-startup-screen t)
  (tool-bar-mode -1)

  ;;remove menubar
  (menu-bar-mode -1)

  (setq display-time-mode 1
        fringe-mode 0)

  ;; set default font
  (set-face-attribute 'default nil
                      :family "DejaVu Sans Mono"
                      :height 118
                      :weight 'normal
                      :width 'normal)

  ;; no scroll bar
  (scroll-bar-mode 0)

  ;; wrap lines
  (global-visual-line-mode t)
  (diminish 'visual-line-mode)
  (diminish 'eldoc-mode)

  ;;change color of current line
  (global-hl-line-mode t)

  (blink-cursor-mode 0)

  (setq sentence-end-double-space nil)

  ;; background colored fringes
  ;; (set-face-attribute 'fringe nil :background (face-attribute 'default :background))

(setq frame-title-format '("%b"   "  â€”  Emacs"))


#+END_SRC

** Daemon cursor color
#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame
                    (load-theme 'zenburn t))))
    (load-theme 'zenburn t))
#+END_SRC

** Global modes
#+BEGIN_SRC emacs-lisp

  ;;automatically insert second parenthesis
  (electric-pair-mode 1)

  ;; show matching paren
  (show-paren-mode 1)

  ;; overwrite what is currently marked
  (pending-delete-mode 1)

  ;;save outside clipboard to kill ring
  (setq save-interprogram-paste-before-kill t)

  ;; linum-mode hooks
  ;; (add-hook 'emacs-lisp-mode-hook 'linum-mode)
  ;; (add-hook 'sh-mode-hook 'linum-mode)


#+END_SRC

** Keybindings
- =C-"= : goto-match-paren
- =C-c w t= : themes hydra
- =M-k= copy current line
#+BEGIN_SRC emacs-lisp

    ;;open config
    (define-key global-map (kbd "\e\ec")  (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))
    (global-set-key (kbd "C-x C-k") #'kill-this-buffer)
#+END_SRC

** Puts rc files in conf-mode
#+BEGIN_SRC emacs-lisp :results silent
  (add-to-list 'auto-mode-alist '("/\\.[^/]*rc" . conf-mode) t)
#+END_SRC
** Recent files
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)
  (global-set-key (kbd "C-x C-r") 'helm-recentf)
#+END_SRC

** Scrolling
#+BEGIN_SRC emacs-lisp
  ;; Emacs has some awful scrolling by default. This gets rid of that.
  (setq scroll-step 1) ; keyboard scroll one line at a time
  ;; keep cursor in same position on screen
  (setq scroll-preserve-screen-position 'always)
  (setq scroll-conservatively 101)
  ;; number of lines to keep after scrolling with C-v
  (setq next-screen-context-lines 15)


  ;;mouse scrolling

  ;; scroll one line at a time (less "jumpy" than defaults)
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq ring-bell-function 'ignore) ;; turn off bell

#+END_SRC
#+BEGIN_SRC emacs-lisp


  ;;yes or no prompts to y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-set-key (kbd "<f5>") 'revert-buffer)

  ;;reduce clutter in init file
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
  
  ;; Delete my files by moving them to the trash. I'm human and
  ;; occasionally delete things that I actually want later:
  (setq delete-by-moving-to-trash t)


  ;;supposedly makes emacs snappier
  (add-hook 'focus-out-hook #'garbage-collect)

  ;;focuse follows mouse
  (setq mouse-autoselect-window t)

  ;;store backups here
  (defvar backup-dir "~/.emacs.d/backups/")
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

  (global-set-key (kbd "M-;") 'comment-line)
#+END_SRC

** Terminal

#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook (lambda ()
                                (setq-local global-hl-line-mode
                                            nil)))
  (add-hook 'term-mode-hook (lambda ()
                              (setq-local global-hl-line-mode
                                          nil)))
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :defer t)
  (use-package solarized-theme
    :ensure t
    :defer t)
  (use-package zenburn-theme
    :ensure t
    :defer t)
  (use-package material-theme
    :ensure t
    :defer t)
  (use-package dracula-theme
    :ensure t
    :defer t)
  #+END_SRC

#+RESULTS:

** Windows
#+BEGIN_SRC emacs-lisp

  (use-package powershell
    :ensure t)
  (if (string-equal system-name "OP7050WX18055")
      (progn
      (setq ispell-program-name "C:/Program Files (x86)/Aspell/bin/aspell.exe")
    (cd "C:/Users/opernhh/Documents"))
  )
#+END_SRC

** Powerline
see [[file:nhh-lisp/mode-line.el][Mode Line Setup]]
#+BEGIN_SRC emacs-lisp
(use-package powerline
:ensure t)
(use-package spaceline
:ensure t)

;; Configure the mode-line
  (setq-default
   mode-line-format '("%e" (:eval (spaceline-ml-main)))
   powerline-default-separator 'arrow
   ;; powerline-height 30
   spaceline-highlight-face-func 'spaceline-highlight-face-modified
   ;;spaceline-flycheck-bullet (format "%s %s" (mdi "record") "%s")
   spaceline-separator-dir-left '(left . left)
   spaceline-separator-dir-right '(right . right))
  (spaceline-helm-mode 1)



(require 'spaceline
(let*
	  ((zenburn-fg+1      "#FFFFEF")
	   (zenburn-fg        "#DCDCCC")
	   (zenburn-fg-1      "#656555")
	   (zenburn-bg-2      "#000000")
	   (zenburn-bg-1      "#2B2B2B")
	   (zenburn-bg-05     "#383838")
	   (zenburn-bg        "#3F3F3F")
	   (zenburn-bg+05     "#494949")
	   (zenburn-bg+1      "#4F4F4F")
	   (zenburn-bg+2      "#5F5F5F")
	   (zenburn-bg+3      "#6F6F6F")
	   (zenburn-red+2     "#ECB3B3")
	   (zenburn-red+1     "#DCA3A3")
	   (zenburn-red       "#CC9393")
	   (zenburn-red-1     "#BC8383")
	   (zenburn-red-2     "#AC7373")
	   (zenburn-red-3     "#9C6363")
	   (zenburn-red-4     "#8C5353")
	   (zenburn-red-5     "#7C4343")
	   (zenburn-red-6     "#6C3333")
	   (zenburn-orange    "#DFAF8F")
	   (zenburn-yellow    "#F0DFAF")
	   (zenburn-yellow-1  "#E0CF9F")
	   (zenburn-yellow-2  "#D0BF8F")
	   (zenburn-green-5   "#2F4F2F")
	   (zenburn-green-4   "#3F5F3F")
	   (zenburn-green-3   "#4F6F4F")
	   (zenburn-green-2   "#5F7F5F")
	   (zenburn-green-1   "#6F8F6F")
	   (zenburn-green     "#7F9F7F")
	   (zenburn-green+1   "#8FB28F")
	   (zenburn-green+2   "#9FC59F")
	   (zenburn-green+3   "#AFD8AF")
	   (zenburn-green+4   "#BFEBBF")
	   (zenburn-cyan      "#93E0E3")
	   (zenburn-blue+3    "#BDE0F3")
	   (zenburn-blue+2    "#ACE0E3")
	   (zenburn-blue+1    "#94BFF3")
	   (zenburn-blue      "#8CD0D3")
	   (zenburn-blue-1    "#7CB8BB")
	   (zenburn-blue-2    "#6CA0A3")
	   (zenburn-blue-3    "#5C888B")
	   (zenburn-blue-4    "#4C7073")
	   (zenburn-blue-5    "#366060")
	   (zenburn-magenta   "#DC8CC3"))
	
	(set-face-attribute 'powerline-active2 nil :background zenburn-bg+05)
	(set-face-attribute 'powerline-inactive2 nil :background zenburn-bg)
	(set-face-attribute 'spaceline-flycheck-error nil :foreground zenburn-red)
	(set-face-attribute 'spaceline-flycheck-info nil :foreground zenburn-blue+1)
	(set-face-attribute 'spaceline-flycheck-warning nil :foreground zenburn-orange)
	(set-face-attribute 'spaceline-highlight-face nil
						:background zenburn-yellow
						:foreground zenburn-fg-1)
	(set-face-attribute 'spaceline-modified nil
						:background zenburn-red
						:foreground zenburn-red-4)
	(set-face-attribute 'spaceline-read-only nil
						:background zenburn-blue+1
						:foreground zenburn-blue-5)
	(set-face-attribute 'spaceline-unmodified nil
						:background zenburn-green-1
						:foreground zenburn-green+4)
	(set-face-attribute 'org-latex-and-related nil
						:foreground zenburn-green+2)
	(set-face-attribute 'widget-field nil
						:foreground zenburn-bg)) )


  (load-theme 'zenburn)
  (powerline-reset)
  (spaceline-emacs-theme)
#+END_SRC
* Utility Packages
** abbrevs
#+BEGIN_SRC emacs-lisp
  ;; tell emacs where to read definitions from
  (setq abbrev-file-name             
        "~/.emacs.d/abbrev_defs")    
  (add-hook 'org-mode 'abbrev-mode)
#+END_SRC

** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil)
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      )
    (define-key global-map (kbd "C-x \\") 'ace-swap-window)
    )

#+END_SRC

** aggressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
	;; Keep code indented automatically
	:ensure t
	:defer 10
	:config
	(global-aggressive-indent-mode)
	:diminish)
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-keys (nconc (number-sequence ?a ?z))
          avy-background t
          avy-all-windows nil
          )
    :bind
    (("M-g g" . avy-goto-line)
     ("M-g w" . avy-goto-word-or-subword-1)
   
     )
    )
#+END_SRC
** captain
#+BEGIN_SRC emacs-lisp
  (use-package captain
    :ensure t
    :config
    (add-hook 'prog-mode-hook
              (lambda ()
                (setq captain-predicate (lambda () (nth 8 (syntax-ppss (point)))))))
    (add-hook 'text-mode-hook
              (lambda ()
                (setq captain-predicate (lambda () t))))
    (add-hook
     'org-mode-hook
     (lambda ()
       (captain-mode)
       (setq captain-predicate
             (lambda () (not (org-in-src-block-p)))))))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    ;; Company mode provides autocompletion of text and code.
    :ensure t  
    :bind
    (:map company-active-map
          ("C-s" . company-search-candidates)
          ("<tab>" . company-complete-common-or-cycle)
          ("RET" . company-complete-selection)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous))
    :hook
    ((prog-mode ess-mode) . company-mode)
    :config
    ;; (defun my/python-mode-hook ()
    ;;   (add-to-list 'company-backends 'company-jedi))
    ;; (add-hook 'python-mode-hook 'my/python-mode-hook)
    :custom
    (company-idle-delay 0.25)
    (company-require-match nil)
    (company-minimum-prefix-length 3)
    :diminish "Company"
    )
#+END_SRC

** Dictionary
#+BEGIN_SRC emacs-lisp
  (use-package adaptive-wrap
	:ensure t)
  (use-package wordnut
	:ensure t
	:bind (("C-c d" . wordnut-lookup-current-word)
		   ("C-c D" . wordnut-search))
	)
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
    (require 'dired)
    (add-hook 'dired-mode-hook (lambda () (progn
                                            ;; (dired-omit-mode)
                                            (dired-hide-details-mode)
                                            (dired-hide-dotfiles-mode)
                                            )))

    (define-key dired-mode-map (kbd "l") 'dired-up-directory)
    (define-key dired-mode-map (kbd "b") 'dired-up-directory)
    (define-key dired-mode-map (kbd "<left>") 'dired-up-directory)
    (define-key dired-mode-map (kbd "<right>") 'dired-find-alternate-file)

    (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
    (define-key global-map (kbd "C-x d") 'dired-jump)
    (define-key dired-mode-map (kbd "h") 'dired-hide-dotfiles-mode)

  (define-key dired-mode-map (kbd "f") 'helm-find-files)
  (define-key dired-mode-map (kbd "/") 'helm-swoop-without-pre-input)


#+END_SRC

** dired extras
#+BEGIN_SRC emacs-lisp
  (require 'dired)

  (defun joseph-kill-all-other-dired-buffers ( &optional current-buf)
    "kill all dired-buffers and diredp-w32-drivers-mode(w32 use this mode )
    except current-buf ,if current-buf is nil then kill all"
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (not (eq current-buf buf))
                   (or  (eq 'dired-mode  major-mode)
                        (eq 'diredp-w32-drives-mode major-mode)))
          (kill-buffer buf)))))

  (defadvice dired-find-file (around dired-find-file-single-buffer activate)
    "Replace current buffer if file is a directory."
    (interactive)
    (let ((orig (current-buffer))
          (filename (dired-get-file-for-visit)))
      ad-do-it
      (when (and (file-directory-p filename)
                 (not (eq (current-buffer) orig)))
        (joseph-kill-all-other-dired-buffers (current-buffer)))))

  (defadvice dired-up-directory (around dired-up-directory-single-buffer activate)
    "Replace current buffer if file is a directory."
    (interactive)
    (let ((orig (current-buffer)))
      ad-do-it
      (joseph-kill-all-other-dired-buffers (current-buffer))))

  (defadvice dired (before dired-single-buffer activate)
    "Replace current buffer if file is a directory."
    (joseph-kill-all-other-dired-buffers)
    )
  ;;;###autoload
  (defun dired-mouse-find-alternate-file (event)
    "In dired, visit the file or directory you click on instead of the dired buffer."
    (interactive "e")
    (let (file)
      (save-excursion
        (with-current-buffer (window-buffer (posn-window (event-end event)))
          (save-excursion
            (goto-char (posn-point (event-end event)))
            (setq file (dired-get-filename nil t)))))
      (select-window (posn-window (event-end event)))
      (find-alternate-file (file-name-sans-versions file t))))

  (define-key dired-mode-map [mouse-2] 'dired-mouse-find-alternate-file)
#+END_SRC
** exec-path-from-shell
Ensures environment variables inside emacs like the saem as in the user's shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

** Expand region
Expand the marked region in semantic increments (negative prefix to reduce region)
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
	:ensure t
	:config 
	(global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** Fix word
#+BEGIN_SRC emacs-lisp
  (use-package fix-word
    :ensure t
    :config
    (global-set-key (kbd "M-u") #'fix-word-upcase)
    (global-set-key (kbd "M-l") #'fix-word-downcase)
    (global-set-key (kbd "M-c") #'fix-word-capitalize)
    )
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :config 
    :diminish "FlyC"
    )
#+END_SRC

** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
  :ensure t
  :diminish "FlyS")
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :defer 1
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("M-y" . helm-show-kill-ring)
     ("C-M-z" . helm-resume)
     ([remap occur] . helm-occur)
     ([remap bookmark-jump] . helm-bookmarks)
     ("C-x b" . helm-buffers-list)
     ;;("C-x C-b" . helm-buffers-list) ;;replaced by ibuffer
     ("M-s M-g" . helm-google-suggest)
     ("M-o" . helm-semantic-or-imenu)
     ("C-h SPC" . helm-all-mark-rings)
     ("M-s g" . helm-grep-do-git-grep)
     :map helm-map
     ("<tab>" . helm-execute-persistent-action)
     ("C-i" . helm-execute-persistent-action)
     ("C-z" . helm-select-action))
    :custom
    (helm-display-header-line nil)
    (helm-echo-input-in-header-line t)
    (helm-net-prefer-curl t)
    (helm-split-window-default-side 'below)
    (helm-split-window-inside-p t)
    (helm-command-prefix-key "M-,")
    :init
    (require 'helm-config)
    :config
    (use-package helm-files
      :config
      (push ".git$" helm-boring-file-regexp-list))
    (use-package helm-org
      :bind
      (:map my/map
            ("t" . helm-org-agenda-files-headings)))
    (helm-mode)
    (use-package helm-swoop
      :ensure t
      :config
      (progn
        (global-set-key (kbd "C-s") 'helm-swoop-without-pre-input)
        ;;(setq helm-swoop-pre-input-function  (lambda () ""))
        (setq helm-swoop-use-fuzzy-match nil)
        )
      )
    (use-package helm-ag
      :ensure t)
  
    :diminish)
#+END_SRC

** helm flyspell
#+BEGIN_SRC emacs-lisp
;;courtesy of  https://emacs.stackexchange.com/a/14917  
(defun flyspell-goto-previous-error (arg)
	"Go to arg previous spelling error."
	(interactive "p")
	(while (not (= 0 arg))
	  (let ((pos (point))
			(min (point-min)))
		(if (and (eq (current-buffer) flyspell-old-buffer-error)
				 (eq pos flyspell-old-pos-error))
			(progn
			  (if (= flyspell-old-pos-error min)
				  ;; goto beginning of buffer
				  (progn
					(message "Restarting from end of buffer")
					(goto-char (point-max)))
				(backward-word 1))
			  (setq pos (point))))
		;; seek the next error
		(while (and (> pos min)
					(let ((ovs (overlays-at pos))
						  (r '()))
					  (while (and (not r) (consp ovs))
						(if (flyspell-overlay-p (car ovs))
							(setq r t)
						  (setq ovs (cdr ovs))))
					  (not r)))
		  (backward-word 1)
		  (setq pos (point)))
		;; save the current location for next invocation
		(setq arg (1- arg))
		(setq flyspell-old-pos-error pos)
		(setq flyspell-old-buffer-error (current-buffer))
		(goto-char pos)
		(if (= pos min)
			(progn
			  (message "No more miss-spelled word!")
			  (setq arg 0))))))


  (defun check-previous-spelling-error ()
	"Jump to previous spelling error and correct it"
	(interactive)
	(push-mark-no-activate)
	(flyspell-goto-previous-error 1)
	(call-interactively 'helm-flyspell-correct)
	(pop-global-mark))

  (defun check-next-spelling-error ()
	"Jump to next spelling error and correct it"
	(interactive)
	(push-mark-no-activate)
	(flyspell-goto-next-error)
	(call-interactively 'helm-flyspell-correct))

  (defun push-mark-no-activate ()
	"Pushes `point' to `mark-ring' and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
	(interactive)
	(push-mark (point) t nil)
	(message "Pushed mark to ring"))

  (use-package helm-flyspell
	:ensure t
	:config
	(define-key flyspell-mode-map (kbd "C-;") 'check-previous-spelling-error))

#+END_SRC

** Hungry Delete
Deletes all the whitespace when you hit backspace or delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
	:ensure t
	:config
	(global-hungry-delete-mode)
	:diminish)
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
	:ensure t)
#+END_SRC

** ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure t
    :config
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("Dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))
                   ("Web" (or (mode . web-mode) (mode . js2-mode)))
                   ("C/C++" (or (mode . c++-mode)
                                (mode . c-mode)
                                (name . "clang")))
                   ("Python" (mode . python-mode))
                   ("R" (or (mode . ess-mode)
                            (name . "^\\*ESS\\*$")
                            (name . "^\\*R\\*$")))
                   ("Git" (or (mode . magit-process-mode)
                              (mode . magit-status-mode)
                              (mode . magit-popup-mode)))
                   ("Shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("mu4e" (name . "\*mu4e\*"))

                   ("edbi" (or
                            (name . "*edbi*")
                            (name . "*epc*")
                            ))
                   ("Emacs" (or (name . "^\\*scratch\\*$")
                                (name . "^\\*Messages\\*$")
                                (name . "^\\*warnings\\*$")
                                (name . "^\\*completions\\*$")
                                (name . "^\\*compilation\\*$")))
                   ))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)
    (setq ibuffer-never-show-predicates '("helm"))
    )
#+END_SRC

** Icons and fonts
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
	:ensure t)
#+END_SRC

** Magit
Interface to git in emacs
#+BEGIN_SRC emacs-lisp
  (use-package magit
        :ensure t
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-commit-show-diff nil
          magit-revert-buffers 1))
#+END_SRC

** multiple cursors
*** general
#+BEGIN_SRC emacs-lisp
  ;;get rid of nasty secondary selection keybindings
  (delete-overlay mouse-secondary-overlay)
  (global-unset-key [M-mouse-1])
  (global-unset-key [M-drag-mouse-1])
  (global-unset-key [M-down-mouse-1])
  (global-unset-key [M-mouse-3])
  (global-unset-key [M-mouse-2])

  (use-package multiple-cursors
    :ensure t
    :config
    ;;sets return to enter new line rather than exit multiple cursors
    (define-key mc/keymap (kbd "<return>") nil)


    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-M->") 'mc/mark-all-like-this)

    )
#+END_SRC
*** hydra
#+BEGIN_SRC emacs-lisp
 
(global-set-key
   (kbd "C-c m")
   (defhydra multiple-cursors-hydra (:hint nil)
     "
           ^Up^            ^Down^        ^Other^
      ----------------------------------------------
      [_p_]   Next    [_n_]   Next    [_l_] Edit lines
      [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
      [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
      ^ ^             ^ ^             [_q_] Quit
      "
     ("l" mc/edit-lines :exit t)
     ("a" mc/mark-all-like-this :exit t)
     ("n" mc/mark-next-like-this)
     ("N" mc/skip-to-next-like-this)
     ("M-n" mc/unmark-next-like-this)
     ("p" mc/mark-previous-like-this)
     ("P" mc/skip-to-previous-like-this)
     ("M-p" mc/unmark-previous-like-this)
     ("r" mc/mark-all-in-region-regexp :exit t)
     ("q" nil)
     ("<mouse-1>" mc/add-cursor-on-click)
     ("<down-mouse-1>" ignore)
     ("<drag-mouse-1>" ignore)))

#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config (setq neo-theme (if (display-graphic-p) 'icons))
    :bind ("<f8>" . neotree-project-dir-toggle))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
                                          ; (projectile-project-root)
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :hook (gradle-mode . projectile-mode))

  (use-package helm-projectile
    :ensure t
    :config
    (helm-projectile-on)
;;    (helm-projectile-fuzzy-match t)
)

  (use-package flx-ido
    :ensure t)
#+END_SRC

** rainbow mode
Show hex and rgb colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t)
#+END_SRC

** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (global-set-key (kbd "C-<right>") #'paredit-forward-slurp-sexp)
    (global-set-key (kbd "C-<left>") #'paredit-forward-barf-sexp)

    )
#+END_SRC

** spellcheck
#+BEGIN_SRC emacs-lisp
  ;; find aspell and hunspell automatically
  (cond

   ((executable-find "aspell")
	(setq ispell-program-name "aspell")
	;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
	(setq ispell-extra-args '("--mode=tex" "-t" "--sug-mode=ultra" "--lang=en_US"))))

  (eval-after-load "flyspell"
	'(progn
	   (define-key flyspell-mouse-map [mouse-3] #'flyspell-correct-word)))


  (defun endless/org-ispell ()
	(make-local-variable 'ispell-skip-region-alist)

	(defconst help/org-special-pre "^\s*#[+]")
	(defun help/block-regex (special)
	  "Make an ispell skip-region alist for a SPECIAL block."
	  (interactive)
	  `(,(concat help/org-special-pre "BEGIN_" special)
		.
		,(concat help/org-special-pre "END_" special)))

	(add-to-list 'ispell-skip-region-alist (help/block-regex "SRC"))
	(add-to-list 'ispell-skip-region-alist (help/block-regex "EXAMPLE"))
	(add-to-list 'ispell-skip-region-alist '("^\s*:PROPERTIES\:$" . "^\s*:END\:$"))
	(let ()
	  (--each
		  '(("ATTR_LATEX" nil)
			("AUTHOR" nil)
			("BLOG" nil)
			("CREATOR" nil)
			("DATE" nil)
			("DESCRIPTION" nil)
			("EMAIL" nil)
			("EXPORT" nil)
			("EXCLUDE_TAGS" nil)
			("HTML_CONTAINER" nil)
			("HTML_DOCTYPE" nil)
			("HTML_HEAD" nil)
			("HTML_HEAD_EXTRA" nil)
			("HTML_LINK_HOME" nil)
			("HTML_LINK_UP" nil)
			("HTML_MATHJAX" nil)
			("INFOJS_OPT" nil)
			("KEYWORDS" nil)
			("LANGUAGE" nil)
			("LATEX_CLASS" nil)
			("LATEX_CLASS_OPTIONS" nil)
			("LATEX_HEADER" nil)
			("LATEX_HEADER_EXTRA" nil)
			("NAME" t)
			("OPTIONS" t)
			("POSTID" nil)
			("RESULTS" t)
			("SELECT_TAGS" nil)
			("STARTUP" nil)
			("TITLE" nil))
		(add-to-list
		 'ispell-skip-region-alist
		 (let ((special (concat "#[+]" (car it) ":")))
		   (if (cadr it)
			   (cons special "$")
			 (list special)))))))
  (add-hook 'org-mode-hook #'endless/org-ispell)


#+END_SRC
** sudo here better shell
Use =better-shell-sudo-here= to reopen current file as root
#+BEGIN_SRC emacs-lisp
(use-package better-shell
:ensure t)
#+END_SRC

** try
To temporarily 
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** tramp
#+BEGIN_SRC emacs-lisp
  (setq tramp-terminal-type "dumb"
        tramp-default-method "ssh")

#+END_SRC
** Undo Tree
To visualize undo history. =C-x u=
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	:ensure t
	:init (global-undo-tree-mode)
	:diminish
	)
#+END_SRC

** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** writeroom mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :ensure t
    :config
    (setq writeroom-bottom-divider-width 0)
    (setq writeroom-border-width 20)
    ;; (setq writeroom-border-width 20)
    (setq writeroom-width 90)
    (custom-set-variables
     '(writeroom-global-effects '(writeroom-set-fullscreen
                                  writeroom-set-alpha
                                  writeroom-set-menu-bar-lines
                                  writeroom-set-tool-bar-lines
                                  writeroom-set-vertical-scroll-bars
                                  writeroom-set-bottom-divider-width
                                  writeroom-set-internal-border-width)))
    )

  (setq default-fringe-color (face-attribute 'fringe :background))

  (defun my-writeroom-theme (arg)
    "Change fringe color to background ARG."
    (cond
     ((= arg 1)
      (set-face-attribute 'fringe nil :background (face-attribute 'default :background)))
     ((= arg -1)
      (set-face-attribute 'fringe nil :background default-fringe-color)))

    )
  (custom-set-variables
   '(writeroom-global-effects
     (quote
      (writeroom-set-fullscreen writeroom-set-alpha writeroom-set-menu-bar-lines writeroom-set-tool-bar-lines writeroom-set-vertical-scroll-bars writeroom-set-bottom-divider-width writeroom-set-internal-border-width
                                my-writeroom-theme))))

  (global-set-key (kbd "C-<f11>") #'writeroom-mode)
#+END_SRC
**  yasnippet
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     ;; (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
     ;; (setq yas-snippet-dirs
           ;; '("~/.emacs.d/snippets"))
     (yas-global-mode 1)
     ;; (diminish 'yas-minor-mode)
     )

  (use-package yasnippet-snippets
     :ensure t)

   (use-package java-snippets
     :ensure t)
#+END_SRC
* Documents
** latex
*** latex org export
#+BEGIN_SRC emacs-lisp
  ;; My custom LaTeX class for Org-mode export. require is needed for it to work.
  (setf org-highlight-latex-and-related '(latex))
  (setq org-src-fontify-natively t)
  (setq org-latex-with-hyperref nil)
  (setq org-latex-title-command "\\maketitle")
  (setq org-latex-toc-command "")
  (setq org-export-with-section-numbers nil)
  (setq user-full-name "Nicholas Hanoian")
  (setq org-latex-create-formula-image-program 'imagemagick)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
  (setq org-latex-default-class "homework")
  (setq preview-button-1 '[mouse-1])
  (setq font-latex-fontify-script nil)
  (setq font-latex-fontify-sectioning 'color)

  (setq TeX-auto-untabify 't)
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options '(
                                   ;; ("frame" "lines")
                                   ;; ("framesep" "2mm")
                                   ;; ("bgcolor" "bg")
                                   ;; ("fontsize" "\\footnotesize")
                                   ;; ("linenos" "")
                                   ))

  (setq org-src-fontify-natively t)



  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -shell-escape -interaction nonstopmode' -pdf -f %f"))

  (defun tmp-pdf ()
    (org-babel-temp-file "./figure-" ".pdf"))

  ;; (setq org-latex-pdf-process
  ;;       '("latexmk -pdf -f %f"))


  ;; ;
                                          ; (defvar texfrag-submap
  ;;  '(let ((map (make-sparse-keymap)))
  ;;   (define-key map "\C-p" #'preview-at-point)
  ;;   (define-key map "\C-r" #'preview-region)
  ;;   (define-key map "\C-b" #'preview-buffer)
  ;;   (define-key map "\C-d" #'preview-document)
  ;;   (define-key map "\C-f" #'preview-cache-preamble)
  ;;   (define-key map "\C-c\C-f" #'preview-cache-preamble-off)
  ;;   (define-key map "\C-i" #'preview-goto-info-page)
  ;;   ;;  (define-key map "\C-q" #'preview-paragraph)
  ;;   (define-key map "\C-e" #'preview-environment)
  ;;   (define-key map "\C-s" #'preview-section)
  ;;   (define-key map "\C-w" #'preview-copy-region-as-mml)
  ;;   (define-key map "\C-c\C-p" #'preview-clearout-at-point)
  ;;   (define-key map "\C-c\C-r" #'preview-clearout)
  ;;   (define-key map "\C-c\C-s" #'preview-clearout-section)
  ;;   (define-key map "\C-c\C-b" #'preview-clearout-buffer)
  ;;   (define-key map "\C-c\C-d" #'preview-clearout-document)
  ;;   map))

  ;;   (texfrag-set-prefix "\C-c\C-p")

  (use-package ov
    :ensure t)

  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

  (add-to-list 'org-latex-classes
               '("homework"
                 "\\ProvidesPackage{/home/nick/dropbox/config/homework}
                  \\documentclass{/home/nick/dropbox/config/homework}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("cheatsheet"
                 "\\ProvidesPackage{/home/nick/dropbox/config/cheatsheet}
                  \\documentclass{/home/nick/dropbox/config/cheatsheet}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (setq org-export-headline-levels 4)


#+END_SRC

*** centered previews
 #+BEGIN_SRC emacs-lisp
   ;; specify the justification you want
   (plist-put org-format-latex-options :justify 'center)

   (defun org-justify-fragment-overlay (beg end image imagetype)
	 "Adjust the justification of a LaTeX fragment.
   The justification is set by :justify in
   `org-format-latex-options'. Only equations at the beginning of a
   line are justified."
	 (cond
	  ;; Centered justification
	  ((and (eq 'center (plist-get org-format-latex-options :justify)) 
			(= beg (line-beginning-position)))
	   (let* ((img (create-image image 'imagemagick t))
			  (width (car (image-size img)))
			  ;;(offset (floor (- (/ (window-text-width) 2) (/ width 2) 15))))
			  (offset 10))
		 (overlay-put (ov-at) 'before-string (make-string offset ? ))))
	  ;; Right justification
	  ((and (eq 'right (plist-get org-format-latex-options :justify)) 
			(= beg (line-beginning-position)))
	   (let* ((img (create-image image 'imagemagick t))
			  (width (car (image-display-size (overlay-get (ov-at) 'display))))
			  (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
		 (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

   (defun org-latex-fragment-tooltip (beg end image imagetype)
	 "Add the fragment tooltip to the overlay and set click function to toggle it."
	 (overlay-put (ov-at) 'help-echo
				  (concat (buffer-substring beg end)
						  "mouse-1 to toggle."))
	 (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
									   (define-key map [mouse-1]
										 `(lambda ()
											(interactive)
											(org-remove-latex-fragment-image-overlays ,beg ,end)))
									   map)))

   ;; advise the function to a
   (advice-add 'org--format-latex-make-overlay :after 'org-justify-fragment-overlay)
   (advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)
 #+END_SRC

*** cdlatex
#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
	:ensure t
	:hook ((LaTeX-mode . turn-on-cdlatex)
		   ;;(org-mode . turn-on-cdlatex)
)
	)
#+END_SRC

*** auctex
#+BEGIN_SRC emacs-lisp :results output silent 
  (use-package tex-site
	;; AuCTeX is better than the built in tex mode; let's use it.  This
	;; demand adds almost nothing and ensures that auctex gets to set itself
	;; up properly. That's necessary because of how weirdly it gets loaded.
	:ensure auctex
	:demand t
	:custom
	(TeX-auto-save t)
	;;(TeX-electric-escape t)
	(TeX-electric-math '("\\(" . "\\)") "Smart $ behavior")
	(TeX-electric-sub-and-superscript t)
	(TeX-parse-self t)
	(reftex-plug-into-AUCTeX t)
	;;(setq font-latex-fontify-script nil) ;; stop changing position of stuff on lines
	(TeX-source-correlate-method 'synctex)
	(TeX-source-correlate-mode t)
	(TeX-clean-confirm nil)
	;; TeX-command-list by default contains a bunch of stuff I'll never
	;; use. I use latexmk, xelatexmk, and View.  That's pretty much it.
	;; Maybe one day I'll add "clean" back to the list.
	;; (TeX-command-list
	;;  '(("latexmk" "latexmk -synctex=1 -quiet -pdf %s"
	;;     TeX-run-compile nil t :help "Process file with latexmk")
	;;    ("View" "%V" TeX-run-discard-or-function nil t :help "Run Viewer")
	;;    ("xelatexmk" "latexmk -synctex=1 -quiet -xelatex %s"
	;;     TeX-run-compile nil t :help "Process file with xelatexmk")))
	:hook
	(LaTeX-mode . LaTeX-math-mode)
	(LaTeX-mode . reftex-mode)
	(LaTeX-mode . TeX-PDF-mode)
	(LaTeX-mode . (lambda ()
					(push
					 '("Make" "latexmk -outdir=/tmp %t" TeX-run-TeX nil t
					   :help "Make pdf output using latexmk.")
					 TeX-command-list)))
	:config
	(setq-default TeX-command-default "latexmk")
	;; revert pdf from file after compilation finishes
	(use-package tex-buf
	  :config
	  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
	(use-package latex
	  :bind
	  (:map LaTeX-mode-map
			("M-p" . outline-previous-visible-heading)
			("M-n" . outline-next-visible-heading)
			("<backtab>" . org-cycle))
	  :config
	  (push "\\.fdb_latexmk" LaTeX-clean-intermediate-suffixes)
	  (push "\\.fls" LaTeX-clean-intermediate-suffixes)
	  (push "\\.synctex.gz" LaTeX-clean-intermediate-suffixes)))
#+END_SRC

*** Texfrag
#+BEGIN_SRC emacs-lisp :results silent
  (use-package texfrag
	:ensure t
	:config
	;;(texfrag-global-mode t)
	:hook
	(org-mode . texfrag-mode)
	:diminish "Frag"
	)
#+END_SRC

** markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :hook (markdown-mode . linum-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
#+END_SRC

** org-mode
*** general org stuff
#+BEGIN_SRC emacs-lisp :results silent
    (use-package org
      :ensure t
      :config
      (setq org-directory "~/Dropbox/org"
            org-src-window-setup 'current-window
            )
      (setq org-latex-caption-above nil)
      :hook ((org-mode . company-mode)
             (org-mode . org-indent-mode)
             (org-mode . flyspell-mode))
      )

    (use-package org-bullets
      :ensure t
      :hook (org-mode . (lambda () (org-bullets-mode 1))))

  (setq org-confirm-babel-evaluate nil)
    (setq org-hide-leading-stars t)

  ;; ask to archive all complete subtrees
    (define-key org-mode-map (kbd "C-c C-x C-a")
    (lambda () (interactive) (org-archive-subtree '(4))))
#+END_SRC
*** refile
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
;; makes org-refile outline working with helm/ivy
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC
*** latex and html macro
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("latex-macros" . latex))

  (defvar org-babel-default-header-args:latex-macros
	'((:results . "raw")
	  (:exports . "results")))

  (defun prefix-all-lines (pre body)
	(with-temp-buffer
	  (insert body)
	  (string-insert-rectangle (point-min) (point-max) pre)
	  (buffer-string)))

  (defun org-babel-execute:latex-macros (body _params)
	(concat
	 (prefix-all-lines "#+LATEX_HEADER: " body)
	 "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
	 (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
	 "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
#+END_SRC

*** Don't ask to evaluate latex-macros or latex src blocks
#+BEGIN_SRC emacs-lisp
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (or (string= lang "latex-macros")
             (string= lang "latex"))))  
  ;; (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+END_SRC

*** org-mode company completion
#+BEGIN_SRC emacs-lisp
  (defun org-keyword-backend (command &optional arg &rest ignored)
    (interactive (list 'interactive))
    (cl-case command
      (interactive (company-begin-backend 'org-keyword-backend))
      (prefix (and (eq major-mode 'org-mode)
                   (cons (company-grab-line "^#\\+\\(\\w*\\)" 1)
                         t)))
      (candidates (mapcar #'upcase
                          (cl-remove-if-not
                           (lambda (c) (string-prefix-p arg c))
                           (pcomplete-completions))))
      (ignore-case t)
      (duplicates t)))

  (defun org-files-backend (command &optional arg &rest ignored)
    (interactive (list 'interactive))
    (cl-case command
      (interactive (company-begin-backend 'org-files-backend))
      (prefix (and (eq major-mode 'org-mode)
                   (cons (company-grab-line "^=\\/\\(\\w*\\)" 1)
                         t)))
      (candidates 'company-files--complete)
      (ignore-case t)
      (duplicates t)))

  (defun my-org-mode-hook ()
    (add-to-list 'company-backends 'org-keyword-backend)
    (add-to-list 'company-backends 'org-files-backend)
    )
  (add-hook 'org-mode-hook 'my-org-mode-hook)

#+END_SRC

*** toggle latex export on save
#+BEGIN_SRC emacs-lisp




  (ignore-errors
    (require 'ansi-color)
    (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))

  (defun nhh-compile-finish (buffer outstr)
    (unless (string-match "finished" outstr)
      (switch-to-buffer-other-window buffer))
    t)

  (setq compilation-finish-functions 'nhh-compile-finish)

  (require 'cl)

  (defadvice compilation-start
      (around inhibit-display
              (command &optional mode name-function highlight-regexp)) 
    (if (not (string-match "^\\(find\\|grep\\)" command))
        (cl-letf (((symbol-function 'display-buffer) #'ignore)
                  ((symbol-function 'set-window-point) #'ignore)
                  ((symbol-function 'goto-char) #'ignore)) 
          (save-window-excursion 
            ad-do-it))
      ad-do-it))

  (ad-activate 'compilation-start)


  (defun orgmk-latex ()
    (interactive)
    (let ((myfile (concat (file-name-base (buffer-file-name (buffer-base-buffer))) ".pdf")))

      (compile (concat "orgmk " myfile))
      (message (concat "Beginning compilation for " myfile))))




  (defun toggle-latex-export-on-save ()
    "Enable or disable export LATEX when saving current buffer."
    (interactive)
    (when (not (eq major-mode 'org-mode))
      (error "Not an org-mode file!"))
    (if (memq 'orgmk-latex after-save-hook)
        (progn (remove-hook 'after-save-hook 'orgmk-latex t)
               (message "Disabled org latex export on save"))
      (add-hook 'after-save-hook 'orgmk-latex nil t)
      ;; (set-buffer-modified-p t)
      (message "Enabled org latex export on save")))
  (define-key org-mode-map (kbd "C-c l") 'toggle-latex-export-on-save)
#+END_SRC

*** agenda
#+BEGIN_SRC emacs-lisp
  (setq org-fast-tag-selection-single-key 1)
  (setq org-agenda-timegrid-use-ampm t)


  ;; (setq org-agenda-custom-commands
  ;;       '(("g" "General Agenda"
  ;;          ((agenda "")
  ;;           (todo "")
  ;;           (todo )
  ;;           ;; (tags "garden")
  ;;           ))
  ;;         ;; ("o" "Agenda and Office-related tasks"
  ;;         ;; ((agenda "")
  ;;         ;; (tags-todo "work")
  ;;         ;; (tags "office")))

  ;;         ))

#+END_SRC

*** graphs
#+BEGIN_SRC emacs-lisp
    (setq org-babel-default-header-args
                 '((:session)
                   (:exports . "both")
                   (:tangle . "yes")
                   (:results . "output replace")))

  (setq org-latex-image-default-width "0.75\\textwidth")
  (setq org-latex-tables-booktabs t)

#+END_SRC

*** inline image
#+BEGIN_SRC emacs-lisp
(setq image-file-name-extensions
	  (quote
	   ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))

(setq org-image-actual-width 600)

(setq org-imagemagick-display-command "convert -density 600 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
(defun org-display-inline-images (&optional include-linked refresh beg end)
  "Display inline images.
Normally only links without a description part are inlined, because this
is how it will work for export.  When INCLUDE-LINKED is set, also links
with a description part will be inlined.  This
can be nice for a quick
look at those images, but it does not reflect what exported files will look
like.
When REFRESH is set, refresh existing images between BEG and END.
This will create new image displays only if necessary.
BEG and END default to the buffer boundaries."
  (interactive "P")
  (unless refresh
    (org-remove-inline-images)
    (if (fboundp 'clear-image-cache) (clear-image-cache)))
  (save-excursion
    (save-restriction
      (widen)
      (setq beg (or beg (point-min)) end (or end (point-max)))
      (goto-char beg)
      (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                        (substring (org-image-file-name-regexp) 0 -2)
                        "\\)\\]" (if include-linked "" "\\]")))
            old file ov img)
        (while (re-search-forward re end t)
          (setq old (get-char-property-and-overlay (match-beginning 1)
                                                   'org-image-overlay)
				file (expand-file-name
                      (concat (or (match-string 3) "") (match-string 4))))
          (when (file-exists-p file)
            (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
              (if (file-exists-p file-thumb)
                  (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                        (file-time (nth 5 (file-attributes file 'string))))
                    (if (time-less-p thumb-time file-time)
						(shell-command (format org-imagemagick-display-command
											   file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                (shell-command (format org-imagemagick-display-command
									   file org-image-actual-width org-image-actual-width file-thumb) nil nil))
              (if (and (car-safe old) refresh)
                  (image-refresh (overlay-get (cdr old) 'display))
                (setq img (save-match-data (create-image file-thumb)))
                (when img
                  (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                  (overlay-put ov 'display img)
                  (overlay-put ov 'face 'default)
                  (overlay-put ov 'org-image-overlay t)
                  (overlay-put ov 'modification-hooks
                               (list 'org-display-inline-remove-overlay))
                  (push ov org-inline-image-overlays))))))))))



(defun org-display-inline-images--with-color-theme-background-color (args)
  "Specify background color of Org-mode inline image through modify `ARGS'."
  (let* ((file (car args))
         (type (cadr args))
         (data-p (caddr args))
         (props (cdddr args)))
    ;; get this return result style from `create-image'
    (append (list file type data-p)
            (list :background  "#fffeed")
			props)))

(advice-add 'create-image :filter-args
            #'org-display-inline-images--with-color-theme-background-color)

(add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)



#+END_SRC

*** org-babel
#+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (emacs-lisp . t)
       (python . t)))

  ;; (setq org-image-actual-width '(500))
#+END_SRC

*** org super agenda
#+BEGIN_SRC emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :config
    (org-super-agenda-mode)


  ;;   (setq org-agenda-custom-commands
  ;;         `(
  ;;           ("s" "Super Agenda" 
  ;;            (let ((org-super-agenda-groups
  ;;                     '((:auto-category t)))
  ;;                    (org-agenda-span 1))
  ;;                (org-agenda-list))
  ;;            )
  ;;           ))




    )


  ;; ;; (setq
  ;; org-agenda-custom-commands
  ;; ;
                                          ;       '(("c" "Desk Work" tags-todo "computer" ;; (1) (2) (3) (4)
  ;;          ((org-agenda-files '("~/org/widgets.org" "~/org/clients.org")) ;; (5)
  ;;           (org-agenda-sorting-strategy '(priority-up effort-down))) ;; (5) cont.
  ;;          ("~/computer.html")) ;; (6)
  ;;         ;; ...other commands here
  ;;         ))
#+END_SRC

*** org capture
#+BEGIN_SRC emacs-lisp
    (require 'org-capture)

    (setq nhh-org-directory (file-name-as-directory "~/Dropbox/org/"))
  (message "here")
    ;; (setq org-agenda-files (list nhh-org-directory))

    (defun nhh-org-format-list (prefix template list)
      "Add PREFIX and TEMPLATE to LIST."
      (mapcar (lambda (elem)  (append (cons (concat prefix (car elem)) (cdr elem))  (list template))) list)
      )

    (defun nhh-org-build-individual-template (letter title file template)
      "Create individual org capture template.
      LETTER is the keybinding,
      TITLE is the title of the template,
      FILE is the file where the note is captured,
      and TEMPLATE is the org capture template"
      (list letter title 'entry `(file ,(concat nhh-org-directory file)) template)
      )

    (defun nhh-org-build-template-group (prefix template list)
      "Builds template group with PREFIX, TEMPLATE, and LIST of letters, titles, and files."
      (let ((formatted-list (nhh-org-format-list prefix template list)))
        (mapcar (lambda (elem) (apply #'nhh-org-build-individual-template elem)) formatted-list))
      )

    (setq classes '(("a" "algorithms" "algorithms.org") ("g" "graph" "graph.org") ("h" "hcol" "hcol.org")))

    (setq org-capture-templates
          (append
           '(("h" "Homework"))
           (nhh-org-build-template-group "h" "* TODO %?" classes)
           `(
             ("t" "To Do" entry (file ,(concat nhh-org-directory "in.org"))
              "* TODO %?" :prepend t)
             )
           )
          )

    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)



#+END_SRC
*** org capture testing
#+BEGIN_SRC emacs-lisp :tangle no
  ;; (mapcar (lambda (class) (apply #'nhh-org-build-individual-template  class)) (nhh-make-homework-templates "h" classes))

  ;; (setq org-capture-templates
  ;; 	  `(,(mapcar (lambda (class) (apply #'nhh-org-build-individual-template  class)) (nhh-make-homework-templates "h" classes))


  ;; 		)
  ;; 	  )





  ;; (nhh-make-homework-templates "h" classes)


  (cons '(1 2) '((3) (4)))
  (append '(1 2) '(3 4))

  (append '(1 2 3) (list 4))

  (car '((lion tiger cheetah)
         (gazelle antelope zebra)
         (whale dolphin seal)))

  (list (values-list '(1 2)) '(3 4))

  (nhh-org-format-list "h" "* TODO %?" classes)


  ;; (nhh-org-build-individual-template '("t" "Test" "todo.org"))


  ;; (setq org-capture-templates
  ;;       `(,(mapcar (lambda (class) (apply #'nhh-org-build-individual-template  class)) classes)
  ;;         ("l" "lone" entry (file "~/Dropbox/org/lone.org") "asdf")


  ;;         ))




  (setq org-capture-templates
        '(("h" "homework")

          ("ha" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
           "* %?\nSCHEDULED: %^T")
          ("hl" "Link" entry (file+headline "~/Dropbox/org/links.org" "Links")
           "* %? %^L %^g \n%T" :prepend t)
          ("hb" "Blog idea" entry (file+headline "~/Dropbox/org/i.org" "Blog Topics:")
           "* %?\n%T" :prepend t)

          ("n" "Note" entry (file+headline "~/Dropbox/org/i.org" "Note space")
           "* %?\n%u" :prepend t)
          ("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")
          ))
#+END_SRC

*** org alert
#+BEGIN_SRC emacs-lisp
  (use-package org-alert
    :ensure t
    :config
    (org-alert-enable)
    (setq alert-default-style nil)
)
#+END_SRC
*** collapse current heading
#+BEGIN_SRC emacs-lisp
  (defun nhh-org-collapse-current (arg)
    "collapses current org mode subheading"
    (interactive "p")
    (if (not (org-at-heading-or-item-p))
        (org-previous-visible-heading arg))
    (org-cycle))
    (define-key org-mode-map (kbd "C-<tab>") 'nhh-org-collapse-current)
#+END_SRC
*** htmlize
#+BEGIN_SRC emacs-lisp
(use-package htmlize
:ensure t)
#+END_SRC
* Programming
** Bash completion

#+BEGIN_SRC emacs-lisp
  (use-package bash-completion
    :ensure t
    :config
    (bash-completion-setup)
    )
#+END_SRC
** cpp
- Needs cmake and clang
#+BEGIN_SRC emacs-lisp
    (use-package irony
      :ensure t)

  (use-package cc-mode
    :ensure t
    :config
    (define-key c++-mode-map (kbd "C-c C-c") #'compile)
    (define-key c++-mode-map (kbd "C-c C-r") (lambda () (interactive) (compile "make run -C ../")))
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (setq-default c-basic-offset 4)
    )

  (use-package company-c-headers
    :ensure t
    :config
    (add-to-list 'company-backends 'company-c-headers)
    )

  (use-package auto-yasnippet
    :ensure t)

  (use-package function-args
    :ensure t)

 (defadvice find-tag (before c-tag-file activate)
   "Automatically create tags file."
   (let ((tag-file (concat default-directory "TAGS")))
     (unless (file-exists-p tag-file)
       (shell-command "etags *.[ch] -o TAGS 2>/dev/null"))
     (visit-tags-table tag-file)))


#+END_SRC

** ctags
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'helm-gtags-mode)
;; customize
(custom-set-variables
 '(helm-gtags-path-style 'relative)
 '(helm-gtags-ignore-case t)
 '(helm-gtags-auto-update t))

;; key bindings
(with-eval-after-load 'helm-gtags
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-find-tag)
  (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
  (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
  (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack))
    )
#+END_SRC
** ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :config
    (setq ess-smart-S-assign-key nil)
    (add-hook 'inferior-ess-mode-hook '(lambda () (aggressive-indent-mode 0)))

    ;; (ess-disable-smart-S-assign)
    )
#+END_SRC
** Gradle
#+BEGIN_SRC emacs-lisp
  (use-package gradle-mode
	:ensure t
	:hook (java-mode . (lambda() (gradle-mode 1))))

  ;; (defun build-and-run (&optional CLASS-NAME)
  ;;   "Get class name from buffer."
  ;;   (interactive "sClass to run (default current buffer): ")
  ;;   (gradle-run (concat "build run -Pmain=" (or CLASS-NAME (file-name-base (buffer-file-name (window-buffer (minibuffer-selected-window))))))))

  (cl-defun build-and-run (&optional CLASS-NAME &key (CLASS-NAME (file-name-base (buffer-file-name (window-buffer (minibuffer-selected-window))))))
	(interactive "sClass to run (default current buffer): ")
	(save-buffer)
	(gradle-run (concat "build run -q -Pmain=" CLASS-NAME)))

  (define-key gradle-mode-map (kbd "C-c C-r") 'build-and-run)

  (use-package groovy-mode
    :ensure t
    :hook (//.gradle// . groovy-mode))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    ;; add capability to submit code to interpreter and mark errors
    ;;    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (add-hook 'haskell-mode-hook '(lambda () (aggressive-indent-mode 0)))

    ;; merge this with your existing custom-set-variables
    (custom-set-variables

     ;; NOTE: include following line to work around haskell-mode
     ;; bug if using GHC >= 8.2.1.
     ;; See: https://github.com/haskell/haskell-mode/issues/1553
     '(haskell-process-args-stack-ghci
       '("--ghci-options=-ferror-spans -fshow-loaded-modules"
         "--no-build" "--no-load"))

     ;; some options suggested in the haskell-mode documentation
     '(haskell-process-auto-import-loaded-modules t)
     '(haskell-process-log t)
     '(haskell-process-suggest-remove-import-lines t)

     ;; make sure "stack ghci" is used, even in the global project
     '(haskell-process-type 'stack-ghci)))



  (use-package intero
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'intero-mode))


  (use-package helm-hoogle
    :ensure t)

#+END_SRC

** js2
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :hook ((//.js// . js2-mode)
           (js2-mode . js2-imenu-extras-mode))
    )

  (use-package js2-refactor
    :ensure t)
#+END_SRC

** meghanada
#+BEGIN_SRC emacs-lisp
  ;; (use-package meghanada
  ;;   :ensure t
  ;;   :init
  ;;   (setq meghanada-gradle-path "gradle")
  ;;   :bind
  ;;   (:map meghanada-mode-map
  ;;         (("C-M-o" . meghanada-optimize-import)
  ;;          ("C-M-t" . meghanada-import-all)
  ;;          )))
  ;; (defun tkj-java-meghanda-mode-hook ()
  ;;   (meghanada-mode)
  ;;   (flycheck-mode))
  ;; (add-hook 'java-mode-hook 'tkj-java-meghanda-mode-hook)
#+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  ;; (use-package anaconda-mode
  ;;   :ensure t
  ;;   :hook
  ;;   (python-mode . anaconda-mode)
  ;;   (python-mode . anaconda-eldoc-mode))

  ;; ;;spacing around operators
  ;; (use-package electric-operator
  ;;   :ensure t
  ;;   :hook ((ess-mode python-mode) . electric-operator-mode))

  ;; (use-package python-mode
  ;;   :ensure t)


  ;; ;;for autocompletion
  ;; (use-package company-jedi
  ;;   :ensure t)


  (use-package elpy
    :ensure t)
  (use-package virtualenvwrapper
    :ensure t
    :config
    (progn
      ;;(venv-initialize-eshell)
      (setq venv-location "~/.venvs")))

#+END_SRC

** Sage
#+BEGIN_SRC emacs-lisp
(use-package sage-shell-mode
:disabled
;;:ensure t
:config
(sage-shell:define-alias))

(use-package ob-sagemath
:disabled
;;:ensure t
:config
;; Ob-sagemath supports only evaluating with a session.
(setq org-babel-default-header-args:sage '((:session . t)
                                           (:results . "output")))

;; C-c c for asynchronous evaluating (only for SageMath code blocks).
(with-eval-after-load "org"
  (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

;; Do not confirm before evaluation
(setq org-confirm-babel-evaluate nil)

;; Do not evaluate code blocks when exporting.
(setq org-export-babel-evaluate nil)

;; Show images when opening a file.
(setq org-startup-with-inline-images t)

;; Show images after evaluating code blocks.
;;(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
)
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode)
           ("\\.html\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.jinja\\'" . web-mode)
           ("\\.php\\'" . web-mode)
           )
    :config

    (defun my-setup-php ()
      ;; enable web mode
      (web-mode)

      ;; make these variables local
      (make-local-variable 'web-mode-code-indent-offset)
      (make-local-variable 'web-mode-markup-indent-offset)
      (make-local-variable 'web-mode-css-indent-offset)

      ;; set indentation, can set different indentation level for different code type
      (setq web-mode-code-indent-offset 4)
      (setq web-mode-css-indent-offset 2)
      (setq web-mode-markup-indent-offset 2)
      (flycheck-select-checker 'my-php)
      (flycheck-mode t)
      )

    (add-to-list 'auto-mode-alist '("\\.php$" . my-setup-php))
    (flycheck-define-checker my-php
      "A PHP syntax checker using the PHP command line interpreter.

    See URL `http://php.net/manual/en/features.commandline.php'."
      :command ("php" "-l" "-d" "error_reporting=E_ALL" "-d" "display_errors=1"
                "-d" "log_errors=0" source)
      :error-patterns
      ((error line-start (or "Parse" "Fatal" "syntax") " error" (any ":" ",") " "
              (message) " in " (file-name) " on line " line line-end))
      :modes (php-mode php+-mode web-mode))

    (define-key web-mode-map (kbd "C-c C-r") (lambda () (interactive) (compile "make push")))
    (define-key apache-mode-map (kbd "C-c C-r") (lambda () (interactive) (compile "make push")))


    (progn
      (setq web-mode-engines-alist
            '(("\\.jinja\\'"  . "django")))))
  (use-package company-php
  :ensure t)
  (use-package ac-php
  :ensure t
  :config
  (add-hook 'web-mode-hook
            '(lambda ()
               (require 'company-php)
               (company-mode t)
               (ac-php-core-eldoc-setup) ;; enable eldoc
               (make-local-variable 'company-backends)
               (add-to-list 'company-backends 'company-ac-php-backend))))
#+END_SRC 
** apache-mode
#+BEGIN_SRC emacs-lisp
  (use-package apache-mode
    :ensure t)
#+END_SRC
** edbi
You need to install some stuff:
- =mysql= package on machine
- Perl packages:
#+BEGIN_SRC sh
sudo cpan RPC::EPC::Service DBI DBD::SQLite DBD::Pg DBD::mysql
#+END_SRC

To connect: =M-x edbi:open-db-viewer=
Data source: =dbi:mysql:database=<dbname>:host=<url>=

#+BEGIN_SRC emacs-lisp
  (use-package edbi
    :ensure t
    :config
    (add-hook 'edbi:sql-mode-hook #'company-mode)
    )
#+END_SRC
* Last
** NHH Lisp
#+BEGIN_SRC emacs-lisp
  
  (load-directory "~/.emacs.d/nhh-lisp")

  (if (string-equal system-name "nick-laptop")
      (setq powerline-height 40)
    (string-equal system-name "nick-pc")
    (setq powerline-height 20)
    (set-face-attribute 'default nil :height 120)
    )


#+END_SRC
** Custom Faces
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(web-mode-html-tag-bracket-face ((t (:foreground "#DCDCCC")))))
#+END_SRC


* orgmk
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm
:ensure t)

#+END_SRC

* mu4e
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'smtpmail)

  ;; smtp
  (setq message-send-mail-function 'smtpmail-send-it
        smtpmail-starttls-credentials
        '(("smtp.gmail.com" 587 nil nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-debug-info t)

  (require 'mu4e)

  (setq mu4e-maildir (expand-file-name "~/.mail/gmail"))

  ;; Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail"



  ;; (setq mu4e-drafts-folder "/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  ;; (setq mu4e-trash-folder  "/Trash")
  ;; (setq message-signature-file "~/.emacs.d/.signature") ; put your signature in this file

                                          ; get mail
  (setq mu4e-get-mail-command "mbsync -c ~/.mbsync/mbsyncrc gmail"
        ;; mu4e-html2text-command "w3m -T text/html"
        mu4e-update-interval 120
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include nil)

  ;; (setq mu4e-maildir-shortcuts
  ;;       '( ("/INBOX"               . ?i)
  ;;          ("/Sent Items"   . ?s)
  ;;          ("/Trash"       . ?t)
  ;;          ("/Drafts"    . ?d)))

  ;; show images
  (setq mu4e-show-images t)

  ;; use imagemagick, if available
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  ;; general emacs mail settings; used when composing e-mail
  ;; the non-mu4e-* stuff is inherited from emacs/message-mode
  (setq mu4e-reply-to-address "nicholashanoian@gmail.com"
        user-mail-address "nicholashanoian@gmail.com"
        user-full-name  "Nicholas Hanoian")


#+END_SRC
